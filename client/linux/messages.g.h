// Autogenerated from Pigeon (v22.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_G_H_
#define PIGEON_MESSAGES_G_H_

#include <flutter_linux/flutter_linux.h>

G_BEGIN_DECLS

G_DECLARE_FINAL_TYPE(PigeonMelodinkMelodinkHostPlayerApiInfoExternalPauseResponse, pigeon_melodink_melodink_host_player_api_info_external_pause_response, PIGEON_MELODINK, MELODINK_HOST_PLAYER_API_INFO_EXTERNAL_PAUSE_RESPONSE, GObject)

/**
 * pigeon_melodink_melodink_host_player_api_info_external_pause_response_is_error:
 * @response: a #PigeonMelodinkMelodinkHostPlayerApiInfoExternalPauseResponse.
 *
 * Checks if a response to MelodinkHostPlayerApiInfo.externalPause is an error.
 *
 * Returns: a %TRUE if this response is an error.
 */
gboolean pigeon_melodink_melodink_host_player_api_info_external_pause_response_is_error(PigeonMelodinkMelodinkHostPlayerApiInfoExternalPauseResponse* response);

/**
 * pigeon_melodink_melodink_host_player_api_info_external_pause_response_get_error_code:
 * @response: a #PigeonMelodinkMelodinkHostPlayerApiInfoExternalPauseResponse.
 *
 * Get the error code for this response.
 *
 * Returns: an error code or %NULL if not an error.
 */
const gchar* pigeon_melodink_melodink_host_player_api_info_external_pause_response_get_error_code(PigeonMelodinkMelodinkHostPlayerApiInfoExternalPauseResponse* response);

/**
 * pigeon_melodink_melodink_host_player_api_info_external_pause_response_get_error_message:
 * @response: a #PigeonMelodinkMelodinkHostPlayerApiInfoExternalPauseResponse.
 *
 * Get the error message for this response.
 *
 * Returns: an error message.
 */
const gchar* pigeon_melodink_melodink_host_player_api_info_external_pause_response_get_error_message(PigeonMelodinkMelodinkHostPlayerApiInfoExternalPauseResponse* response);

/**
 * pigeon_melodink_melodink_host_player_api_info_external_pause_response_get_error_details:
 * @response: a #PigeonMelodinkMelodinkHostPlayerApiInfoExternalPauseResponse.
 *
 * Get the error details for this response.
 *
 * Returns: (allow-none): an error details or %NULL.
 */
FlValue* pigeon_melodink_melodink_host_player_api_info_external_pause_response_get_error_details(PigeonMelodinkMelodinkHostPlayerApiInfoExternalPauseResponse* response);

/**
 * PigeonMelodinkMelodinkHostPlayerApiInfo:
 *
 */

G_DECLARE_FINAL_TYPE(PigeonMelodinkMelodinkHostPlayerApiInfo, pigeon_melodink_melodink_host_player_api_info, PIGEON_MELODINK, MELODINK_HOST_PLAYER_API_INFO, GObject)

/**
 * pigeon_melodink_melodink_host_player_api_info_new:
 * @messenger: an #FlBinaryMessenger.
 * @suffix: (allow-none): a suffix to add to the API or %NULL for none.
 *
 * Creates a new object to access the MelodinkHostPlayerApiInfo API.
 *
 * Returns: a new #PigeonMelodinkMelodinkHostPlayerApiInfo
 */
PigeonMelodinkMelodinkHostPlayerApiInfo* pigeon_melodink_melodink_host_player_api_info_new(FlBinaryMessenger* messenger, const gchar* suffix);

/**
 * pigeon_melodink_melodink_host_player_api_info_external_pause:
 * @api: a #PigeonMelodinkMelodinkHostPlayerApiInfo.
 * @cancellable: (allow-none): a #GCancellable or %NULL.
 * @callback: (scope async): (allow-none): a #GAsyncReadyCallback to call when the call is complete or %NULL to ignore the response.
 * @user_data: (closure): user data to pass to @callback.
 *
 */
void pigeon_melodink_melodink_host_player_api_info_external_pause(PigeonMelodinkMelodinkHostPlayerApiInfo* api, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data);

/**
 * pigeon_melodink_melodink_host_player_api_info_external_pause_finish:
 * @api: a #PigeonMelodinkMelodinkHostPlayerApiInfo.
 * @result: a #GAsyncResult.
 * @error: (allow-none): #GError location to store the error occurring, or %NULL to ignore.
 *
 * Completes a pigeon_melodink_melodink_host_player_api_info_external_pause() call.
 *
 * Returns: a #PigeonMelodinkMelodinkHostPlayerApiInfoExternalPauseResponse or %NULL on error.
 */
PigeonMelodinkMelodinkHostPlayerApiInfoExternalPauseResponse* pigeon_melodink_melodink_host_player_api_info_external_pause_finish(PigeonMelodinkMelodinkHostPlayerApiInfo* api, GAsyncResult* result, GError** error);

G_END_DECLS

#endif  // PIGEON_MESSAGES_G_H_
