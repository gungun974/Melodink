// Autogenerated from Pigeon (v22.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#include "messages.g.h"

struct _PigeonMelodinkPlayerStatus {
  GObject parent_instance;

  gboolean playing;
  int64_t pos;
  int64_t position_ms;
  int64_t buffered_position_ms;
  PigeonMelodinkMelodinkHostPlayerProcessingState state;
  PigeonMelodinkMelodinkHostPlayerLoopMode loop;
};

G_DEFINE_TYPE(PigeonMelodinkPlayerStatus, pigeon_melodink_player_status, G_TYPE_OBJECT)

static void pigeon_melodink_player_status_dispose(GObject* object) {
  G_OBJECT_CLASS(pigeon_melodink_player_status_parent_class)->dispose(object);
}

static void pigeon_melodink_player_status_init(PigeonMelodinkPlayerStatus* self) {
}

static void pigeon_melodink_player_status_class_init(PigeonMelodinkPlayerStatusClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = pigeon_melodink_player_status_dispose;
}

PigeonMelodinkPlayerStatus* pigeon_melodink_player_status_new(gboolean playing, int64_t pos, int64_t position_ms, int64_t buffered_position_ms, PigeonMelodinkMelodinkHostPlayerProcessingState state, PigeonMelodinkMelodinkHostPlayerLoopMode loop) {
  PigeonMelodinkPlayerStatus* self = PIGEON_MELODINK_PLAYER_STATUS(g_object_new(pigeon_melodink_player_status_get_type(), nullptr));
  self->playing = playing;
  self->pos = pos;
  self->position_ms = position_ms;
  self->buffered_position_ms = buffered_position_ms;
  self->state = state;
  self->loop = loop;
  return self;
}

gboolean pigeon_melodink_player_status_get_playing(PigeonMelodinkPlayerStatus* self) {
  g_return_val_if_fail(PIGEON_MELODINK_IS_PLAYER_STATUS(self), FALSE);
  return self->playing;
}

int64_t pigeon_melodink_player_status_get_pos(PigeonMelodinkPlayerStatus* self) {
  g_return_val_if_fail(PIGEON_MELODINK_IS_PLAYER_STATUS(self), 0);
  return self->pos;
}

int64_t pigeon_melodink_player_status_get_position_ms(PigeonMelodinkPlayerStatus* self) {
  g_return_val_if_fail(PIGEON_MELODINK_IS_PLAYER_STATUS(self), 0);
  return self->position_ms;
}

int64_t pigeon_melodink_player_status_get_buffered_position_ms(PigeonMelodinkPlayerStatus* self) {
  g_return_val_if_fail(PIGEON_MELODINK_IS_PLAYER_STATUS(self), 0);
  return self->buffered_position_ms;
}

PigeonMelodinkMelodinkHostPlayerProcessingState pigeon_melodink_player_status_get_state(PigeonMelodinkPlayerStatus* self) {
  g_return_val_if_fail(PIGEON_MELODINK_IS_PLAYER_STATUS(self), static_cast<PigeonMelodinkMelodinkHostPlayerProcessingState>(0));
  return self->state;
}

PigeonMelodinkMelodinkHostPlayerLoopMode pigeon_melodink_player_status_get_loop(PigeonMelodinkPlayerStatus* self) {
  g_return_val_if_fail(PIGEON_MELODINK_IS_PLAYER_STATUS(self), static_cast<PigeonMelodinkMelodinkHostPlayerLoopMode>(0));
  return self->loop;
}

static FlValue* pigeon_melodink_player_status_to_list(PigeonMelodinkPlayerStatus* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_new_bool(self->playing));
  fl_value_append_take(values, fl_value_new_int(self->pos));
  fl_value_append_take(values, fl_value_new_int(self->position_ms));
  fl_value_append_take(values, fl_value_new_int(self->buffered_position_ms));
  fl_value_append_take(values, fl_value_new_custom(129, fl_value_new_int(self->state), (GDestroyNotify)fl_value_unref));
  fl_value_append_take(values, fl_value_new_custom(130, fl_value_new_int(self->loop), (GDestroyNotify)fl_value_unref));
  return values;
}

static PigeonMelodinkPlayerStatus* pigeon_melodink_player_status_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  gboolean playing = fl_value_get_bool(value0);
  FlValue* value1 = fl_value_get_list_value(values, 1);
  int64_t pos = fl_value_get_int(value1);
  FlValue* value2 = fl_value_get_list_value(values, 2);
  int64_t position_ms = fl_value_get_int(value2);
  FlValue* value3 = fl_value_get_list_value(values, 3);
  int64_t buffered_position_ms = fl_value_get_int(value3);
  FlValue* value4 = fl_value_get_list_value(values, 4);
  PigeonMelodinkMelodinkHostPlayerProcessingState state = static_cast<PigeonMelodinkMelodinkHostPlayerProcessingState>(fl_value_get_int(reinterpret_cast<FlValue*>(const_cast<gpointer>(fl_value_get_custom_value(value4)))));
  FlValue* value5 = fl_value_get_list_value(values, 5);
  PigeonMelodinkMelodinkHostPlayerLoopMode loop = static_cast<PigeonMelodinkMelodinkHostPlayerLoopMode>(fl_value_get_int(reinterpret_cast<FlValue*>(const_cast<gpointer>(fl_value_get_custom_value(value5)))));
  return pigeon_melodink_player_status_new(playing, pos, position_ms, buffered_position_ms, state, loop);
}

G_DECLARE_FINAL_TYPE(PigeonMelodinkMessageCodec, pigeon_melodink_message_codec, PIGEON_MELODINK, MESSAGE_CODEC, FlStandardMessageCodec)

struct _PigeonMelodinkMessageCodec {
  FlStandardMessageCodec parent_instance;

};

G_DEFINE_TYPE(PigeonMelodinkMessageCodec, pigeon_melodink_message_codec, fl_standard_message_codec_get_type())

static gboolean pigeon_melodink_message_codec_write_pigeon_melodink_melodink_host_player_processing_state(FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value, GError** error) {
  uint8_t type = 129;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  return fl_standard_message_codec_write_value(codec, buffer, value, error);
}

static gboolean pigeon_melodink_message_codec_write_pigeon_melodink_melodink_host_player_loop_mode(FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value, GError** error) {
  uint8_t type = 130;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  return fl_standard_message_codec_write_value(codec, buffer, value, error);
}

static gboolean pigeon_melodink_message_codec_write_pigeon_melodink_player_status(FlStandardMessageCodec* codec, GByteArray* buffer, PigeonMelodinkPlayerStatus* value, GError** error) {
  uint8_t type = 131;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = pigeon_melodink_player_status_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean pigeon_melodink_message_codec_write_value(FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value, GError** error) {
  if (fl_value_get_type(value) == FL_VALUE_TYPE_CUSTOM) {
    switch (fl_value_get_custom_type(value)) {
      case 129:
        return pigeon_melodink_message_codec_write_pigeon_melodink_melodink_host_player_processing_state(codec, buffer, reinterpret_cast<FlValue*>(const_cast<gpointer>(fl_value_get_custom_value(value))), error);
      case 130:
        return pigeon_melodink_message_codec_write_pigeon_melodink_melodink_host_player_loop_mode(codec, buffer, reinterpret_cast<FlValue*>(const_cast<gpointer>(fl_value_get_custom_value(value))), error);
      case 131:
        return pigeon_melodink_message_codec_write_pigeon_melodink_player_status(codec, buffer, PIGEON_MELODINK_PLAYER_STATUS(fl_value_get_custom_value_object(value)), error);
    }
  }

  return FL_STANDARD_MESSAGE_CODEC_CLASS(pigeon_melodink_message_codec_parent_class)->write_value(codec, buffer, value, error);
}

static FlValue* pigeon_melodink_message_codec_read_pigeon_melodink_melodink_host_player_processing_state(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, GError** error) {
  return fl_value_new_custom(129, fl_standard_message_codec_read_value(codec, buffer, offset, error), (GDestroyNotify)fl_value_unref);
}

static FlValue* pigeon_melodink_message_codec_read_pigeon_melodink_melodink_host_player_loop_mode(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, GError** error) {
  return fl_value_new_custom(130, fl_standard_message_codec_read_value(codec, buffer, offset, error), (GDestroyNotify)fl_value_unref);
}

static FlValue* pigeon_melodink_message_codec_read_pigeon_melodink_player_status(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, GError** error) {
  g_autoptr(FlValue) values = fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(PigeonMelodinkPlayerStatus) value = pigeon_melodink_player_status_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED, "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(131, G_OBJECT(value));
}

static FlValue* pigeon_melodink_message_codec_read_value_of_type(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, int type, GError** error) {
  switch (type) {
    case 129:
      return pigeon_melodink_message_codec_read_pigeon_melodink_melodink_host_player_processing_state(codec, buffer, offset, error);
    case 130:
      return pigeon_melodink_message_codec_read_pigeon_melodink_melodink_host_player_loop_mode(codec, buffer, offset, error);
    case 131:
      return pigeon_melodink_message_codec_read_pigeon_melodink_player_status(codec, buffer, offset, error);
    default:
      return FL_STANDARD_MESSAGE_CODEC_CLASS(pigeon_melodink_message_codec_parent_class)->read_value_of_type(codec, buffer, offset, type, error);
  }
}

static void pigeon_melodink_message_codec_init(PigeonMelodinkMessageCodec* self) {
}

static void pigeon_melodink_message_codec_class_init(PigeonMelodinkMessageCodecClass* klass) {
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->write_value = pigeon_melodink_message_codec_write_value;
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->read_value_of_type = pigeon_melodink_message_codec_read_value_of_type;
}

static PigeonMelodinkMessageCodec* pigeon_melodink_message_codec_new() {
  PigeonMelodinkMessageCodec* self = PIGEON_MELODINK_MESSAGE_CODEC(g_object_new(pigeon_melodink_message_codec_get_type(), nullptr));
  return self;
}

struct _PigeonMelodinkMelodinkHostPlayerApiPlayResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(PigeonMelodinkMelodinkHostPlayerApiPlayResponse, pigeon_melodink_melodink_host_player_api_play_response, G_TYPE_OBJECT)

static void pigeon_melodink_melodink_host_player_api_play_response_dispose(GObject* object) {
  PigeonMelodinkMelodinkHostPlayerApiPlayResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_PLAY_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(pigeon_melodink_melodink_host_player_api_play_response_parent_class)->dispose(object);
}

static void pigeon_melodink_melodink_host_player_api_play_response_init(PigeonMelodinkMelodinkHostPlayerApiPlayResponse* self) {
}

static void pigeon_melodink_melodink_host_player_api_play_response_class_init(PigeonMelodinkMelodinkHostPlayerApiPlayResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = pigeon_melodink_melodink_host_player_api_play_response_dispose;
}

PigeonMelodinkMelodinkHostPlayerApiPlayResponse* pigeon_melodink_melodink_host_player_api_play_response_new() {
  PigeonMelodinkMelodinkHostPlayerApiPlayResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_PLAY_RESPONSE(g_object_new(pigeon_melodink_melodink_host_player_api_play_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

PigeonMelodinkMelodinkHostPlayerApiPlayResponse* pigeon_melodink_melodink_host_player_api_play_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  PigeonMelodinkMelodinkHostPlayerApiPlayResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_PLAY_RESPONSE(g_object_new(pigeon_melodink_melodink_host_player_api_play_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _PigeonMelodinkMelodinkHostPlayerApiPauseResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(PigeonMelodinkMelodinkHostPlayerApiPauseResponse, pigeon_melodink_melodink_host_player_api_pause_response, G_TYPE_OBJECT)

static void pigeon_melodink_melodink_host_player_api_pause_response_dispose(GObject* object) {
  PigeonMelodinkMelodinkHostPlayerApiPauseResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_PAUSE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(pigeon_melodink_melodink_host_player_api_pause_response_parent_class)->dispose(object);
}

static void pigeon_melodink_melodink_host_player_api_pause_response_init(PigeonMelodinkMelodinkHostPlayerApiPauseResponse* self) {
}

static void pigeon_melodink_melodink_host_player_api_pause_response_class_init(PigeonMelodinkMelodinkHostPlayerApiPauseResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = pigeon_melodink_melodink_host_player_api_pause_response_dispose;
}

PigeonMelodinkMelodinkHostPlayerApiPauseResponse* pigeon_melodink_melodink_host_player_api_pause_response_new() {
  PigeonMelodinkMelodinkHostPlayerApiPauseResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_PAUSE_RESPONSE(g_object_new(pigeon_melodink_melodink_host_player_api_pause_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

PigeonMelodinkMelodinkHostPlayerApiPauseResponse* pigeon_melodink_melodink_host_player_api_pause_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  PigeonMelodinkMelodinkHostPlayerApiPauseResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_PAUSE_RESPONSE(g_object_new(pigeon_melodink_melodink_host_player_api_pause_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _PigeonMelodinkMelodinkHostPlayerApiSeekResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(PigeonMelodinkMelodinkHostPlayerApiSeekResponse, pigeon_melodink_melodink_host_player_api_seek_response, G_TYPE_OBJECT)

static void pigeon_melodink_melodink_host_player_api_seek_response_dispose(GObject* object) {
  PigeonMelodinkMelodinkHostPlayerApiSeekResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_SEEK_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(pigeon_melodink_melodink_host_player_api_seek_response_parent_class)->dispose(object);
}

static void pigeon_melodink_melodink_host_player_api_seek_response_init(PigeonMelodinkMelodinkHostPlayerApiSeekResponse* self) {
}

static void pigeon_melodink_melodink_host_player_api_seek_response_class_init(PigeonMelodinkMelodinkHostPlayerApiSeekResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = pigeon_melodink_melodink_host_player_api_seek_response_dispose;
}

PigeonMelodinkMelodinkHostPlayerApiSeekResponse* pigeon_melodink_melodink_host_player_api_seek_response_new() {
  PigeonMelodinkMelodinkHostPlayerApiSeekResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_SEEK_RESPONSE(g_object_new(pigeon_melodink_melodink_host_player_api_seek_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

PigeonMelodinkMelodinkHostPlayerApiSeekResponse* pigeon_melodink_melodink_host_player_api_seek_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  PigeonMelodinkMelodinkHostPlayerApiSeekResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_SEEK_RESPONSE(g_object_new(pigeon_melodink_melodink_host_player_api_seek_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _PigeonMelodinkMelodinkHostPlayerApiSkipToNextResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(PigeonMelodinkMelodinkHostPlayerApiSkipToNextResponse, pigeon_melodink_melodink_host_player_api_skip_to_next_response, G_TYPE_OBJECT)

static void pigeon_melodink_melodink_host_player_api_skip_to_next_response_dispose(GObject* object) {
  PigeonMelodinkMelodinkHostPlayerApiSkipToNextResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_SKIP_TO_NEXT_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(pigeon_melodink_melodink_host_player_api_skip_to_next_response_parent_class)->dispose(object);
}

static void pigeon_melodink_melodink_host_player_api_skip_to_next_response_init(PigeonMelodinkMelodinkHostPlayerApiSkipToNextResponse* self) {
}

static void pigeon_melodink_melodink_host_player_api_skip_to_next_response_class_init(PigeonMelodinkMelodinkHostPlayerApiSkipToNextResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = pigeon_melodink_melodink_host_player_api_skip_to_next_response_dispose;
}

PigeonMelodinkMelodinkHostPlayerApiSkipToNextResponse* pigeon_melodink_melodink_host_player_api_skip_to_next_response_new() {
  PigeonMelodinkMelodinkHostPlayerApiSkipToNextResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_SKIP_TO_NEXT_RESPONSE(g_object_new(pigeon_melodink_melodink_host_player_api_skip_to_next_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

PigeonMelodinkMelodinkHostPlayerApiSkipToNextResponse* pigeon_melodink_melodink_host_player_api_skip_to_next_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  PigeonMelodinkMelodinkHostPlayerApiSkipToNextResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_SKIP_TO_NEXT_RESPONSE(g_object_new(pigeon_melodink_melodink_host_player_api_skip_to_next_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _PigeonMelodinkMelodinkHostPlayerApiSkipToPreviousResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(PigeonMelodinkMelodinkHostPlayerApiSkipToPreviousResponse, pigeon_melodink_melodink_host_player_api_skip_to_previous_response, G_TYPE_OBJECT)

static void pigeon_melodink_melodink_host_player_api_skip_to_previous_response_dispose(GObject* object) {
  PigeonMelodinkMelodinkHostPlayerApiSkipToPreviousResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_SKIP_TO_PREVIOUS_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(pigeon_melodink_melodink_host_player_api_skip_to_previous_response_parent_class)->dispose(object);
}

static void pigeon_melodink_melodink_host_player_api_skip_to_previous_response_init(PigeonMelodinkMelodinkHostPlayerApiSkipToPreviousResponse* self) {
}

static void pigeon_melodink_melodink_host_player_api_skip_to_previous_response_class_init(PigeonMelodinkMelodinkHostPlayerApiSkipToPreviousResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = pigeon_melodink_melodink_host_player_api_skip_to_previous_response_dispose;
}

PigeonMelodinkMelodinkHostPlayerApiSkipToPreviousResponse* pigeon_melodink_melodink_host_player_api_skip_to_previous_response_new() {
  PigeonMelodinkMelodinkHostPlayerApiSkipToPreviousResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_SKIP_TO_PREVIOUS_RESPONSE(g_object_new(pigeon_melodink_melodink_host_player_api_skip_to_previous_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

PigeonMelodinkMelodinkHostPlayerApiSkipToPreviousResponse* pigeon_melodink_melodink_host_player_api_skip_to_previous_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  PigeonMelodinkMelodinkHostPlayerApiSkipToPreviousResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_SKIP_TO_PREVIOUS_RESPONSE(g_object_new(pigeon_melodink_melodink_host_player_api_skip_to_previous_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _PigeonMelodinkMelodinkHostPlayerApiSetAudiosResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(PigeonMelodinkMelodinkHostPlayerApiSetAudiosResponse, pigeon_melodink_melodink_host_player_api_set_audios_response, G_TYPE_OBJECT)

static void pigeon_melodink_melodink_host_player_api_set_audios_response_dispose(GObject* object) {
  PigeonMelodinkMelodinkHostPlayerApiSetAudiosResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_SET_AUDIOS_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(pigeon_melodink_melodink_host_player_api_set_audios_response_parent_class)->dispose(object);
}

static void pigeon_melodink_melodink_host_player_api_set_audios_response_init(PigeonMelodinkMelodinkHostPlayerApiSetAudiosResponse* self) {
}

static void pigeon_melodink_melodink_host_player_api_set_audios_response_class_init(PigeonMelodinkMelodinkHostPlayerApiSetAudiosResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = pigeon_melodink_melodink_host_player_api_set_audios_response_dispose;
}

PigeonMelodinkMelodinkHostPlayerApiSetAudiosResponse* pigeon_melodink_melodink_host_player_api_set_audios_response_new() {
  PigeonMelodinkMelodinkHostPlayerApiSetAudiosResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_SET_AUDIOS_RESPONSE(g_object_new(pigeon_melodink_melodink_host_player_api_set_audios_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

PigeonMelodinkMelodinkHostPlayerApiSetAudiosResponse* pigeon_melodink_melodink_host_player_api_set_audios_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  PigeonMelodinkMelodinkHostPlayerApiSetAudiosResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_SET_AUDIOS_RESPONSE(g_object_new(pigeon_melodink_melodink_host_player_api_set_audios_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _PigeonMelodinkMelodinkHostPlayerApiSetLoopModeResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(PigeonMelodinkMelodinkHostPlayerApiSetLoopModeResponse, pigeon_melodink_melodink_host_player_api_set_loop_mode_response, G_TYPE_OBJECT)

static void pigeon_melodink_melodink_host_player_api_set_loop_mode_response_dispose(GObject* object) {
  PigeonMelodinkMelodinkHostPlayerApiSetLoopModeResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_SET_LOOP_MODE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(pigeon_melodink_melodink_host_player_api_set_loop_mode_response_parent_class)->dispose(object);
}

static void pigeon_melodink_melodink_host_player_api_set_loop_mode_response_init(PigeonMelodinkMelodinkHostPlayerApiSetLoopModeResponse* self) {
}

static void pigeon_melodink_melodink_host_player_api_set_loop_mode_response_class_init(PigeonMelodinkMelodinkHostPlayerApiSetLoopModeResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = pigeon_melodink_melodink_host_player_api_set_loop_mode_response_dispose;
}

PigeonMelodinkMelodinkHostPlayerApiSetLoopModeResponse* pigeon_melodink_melodink_host_player_api_set_loop_mode_response_new() {
  PigeonMelodinkMelodinkHostPlayerApiSetLoopModeResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_SET_LOOP_MODE_RESPONSE(g_object_new(pigeon_melodink_melodink_host_player_api_set_loop_mode_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

PigeonMelodinkMelodinkHostPlayerApiSetLoopModeResponse* pigeon_melodink_melodink_host_player_api_set_loop_mode_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  PigeonMelodinkMelodinkHostPlayerApiSetLoopModeResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_SET_LOOP_MODE_RESPONSE(g_object_new(pigeon_melodink_melodink_host_player_api_set_loop_mode_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _PigeonMelodinkMelodinkHostPlayerApiFetchStatusResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(PigeonMelodinkMelodinkHostPlayerApiFetchStatusResponse, pigeon_melodink_melodink_host_player_api_fetch_status_response, G_TYPE_OBJECT)

static void pigeon_melodink_melodink_host_player_api_fetch_status_response_dispose(GObject* object) {
  PigeonMelodinkMelodinkHostPlayerApiFetchStatusResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_FETCH_STATUS_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(pigeon_melodink_melodink_host_player_api_fetch_status_response_parent_class)->dispose(object);
}

static void pigeon_melodink_melodink_host_player_api_fetch_status_response_init(PigeonMelodinkMelodinkHostPlayerApiFetchStatusResponse* self) {
}

static void pigeon_melodink_melodink_host_player_api_fetch_status_response_class_init(PigeonMelodinkMelodinkHostPlayerApiFetchStatusResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = pigeon_melodink_melodink_host_player_api_fetch_status_response_dispose;
}

PigeonMelodinkMelodinkHostPlayerApiFetchStatusResponse* pigeon_melodink_melodink_host_player_api_fetch_status_response_new(PigeonMelodinkPlayerStatus* return_value) {
  PigeonMelodinkMelodinkHostPlayerApiFetchStatusResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_FETCH_STATUS_RESPONSE(g_object_new(pigeon_melodink_melodink_host_player_api_fetch_status_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_custom_object(131, G_OBJECT(return_value)));
  return self;
}

PigeonMelodinkMelodinkHostPlayerApiFetchStatusResponse* pigeon_melodink_melodink_host_player_api_fetch_status_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  PigeonMelodinkMelodinkHostPlayerApiFetchStatusResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_FETCH_STATUS_RESPONSE(g_object_new(pigeon_melodink_melodink_host_player_api_fetch_status_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _PigeonMelodinkMelodinkHostPlayerApiSetAuthTokenResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(PigeonMelodinkMelodinkHostPlayerApiSetAuthTokenResponse, pigeon_melodink_melodink_host_player_api_set_auth_token_response, G_TYPE_OBJECT)

static void pigeon_melodink_melodink_host_player_api_set_auth_token_response_dispose(GObject* object) {
  PigeonMelodinkMelodinkHostPlayerApiSetAuthTokenResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_SET_AUTH_TOKEN_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(pigeon_melodink_melodink_host_player_api_set_auth_token_response_parent_class)->dispose(object);
}

static void pigeon_melodink_melodink_host_player_api_set_auth_token_response_init(PigeonMelodinkMelodinkHostPlayerApiSetAuthTokenResponse* self) {
}

static void pigeon_melodink_melodink_host_player_api_set_auth_token_response_class_init(PigeonMelodinkMelodinkHostPlayerApiSetAuthTokenResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = pigeon_melodink_melodink_host_player_api_set_auth_token_response_dispose;
}

PigeonMelodinkMelodinkHostPlayerApiSetAuthTokenResponse* pigeon_melodink_melodink_host_player_api_set_auth_token_response_new() {
  PigeonMelodinkMelodinkHostPlayerApiSetAuthTokenResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_SET_AUTH_TOKEN_RESPONSE(g_object_new(pigeon_melodink_melodink_host_player_api_set_auth_token_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

PigeonMelodinkMelodinkHostPlayerApiSetAuthTokenResponse* pigeon_melodink_melodink_host_player_api_set_auth_token_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  PigeonMelodinkMelodinkHostPlayerApiSetAuthTokenResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_SET_AUTH_TOKEN_RESPONSE(g_object_new(pigeon_melodink_melodink_host_player_api_set_auth_token_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(PigeonMelodinkMelodinkHostPlayerApi, pigeon_melodink_melodink_host_player_api, PIGEON_MELODINK, MELODINK_HOST_PLAYER_API, GObject)

struct _PigeonMelodinkMelodinkHostPlayerApi {
  GObject parent_instance;

  const PigeonMelodinkMelodinkHostPlayerApiVTable* vtable;
  gpointer user_data;
  GDestroyNotify user_data_free_func;
};

G_DEFINE_TYPE(PigeonMelodinkMelodinkHostPlayerApi, pigeon_melodink_melodink_host_player_api, G_TYPE_OBJECT)

static void pigeon_melodink_melodink_host_player_api_dispose(GObject* object) {
  PigeonMelodinkMelodinkHostPlayerApi* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API(object);
  if (self->user_data != nullptr) {
    self->user_data_free_func(self->user_data);
  }
  self->user_data = nullptr;
  G_OBJECT_CLASS(pigeon_melodink_melodink_host_player_api_parent_class)->dispose(object);
}

static void pigeon_melodink_melodink_host_player_api_init(PigeonMelodinkMelodinkHostPlayerApi* self) {
}

static void pigeon_melodink_melodink_host_player_api_class_init(PigeonMelodinkMelodinkHostPlayerApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = pigeon_melodink_melodink_host_player_api_dispose;
}

static PigeonMelodinkMelodinkHostPlayerApi* pigeon_melodink_melodink_host_player_api_new(const PigeonMelodinkMelodinkHostPlayerApiVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func) {
  PigeonMelodinkMelodinkHostPlayerApi* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API(g_object_new(pigeon_melodink_melodink_host_player_api_get_type(), nullptr));
  self->vtable = vtable;
  self->user_data = user_data;
  self->user_data_free_func = user_data_free_func;
  return self;
}

static void pigeon_melodink_melodink_host_player_api_play_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  PigeonMelodinkMelodinkHostPlayerApi* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API(user_data);

  if (self->vtable == nullptr || self->vtable->play == nullptr) {
    return;
  }

  g_autoptr(PigeonMelodinkMelodinkHostPlayerApiPlayResponse) response = self->vtable->play(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "MelodinkHostPlayerApi", "play");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MelodinkHostPlayerApi", "play", error->message);
  }
}

static void pigeon_melodink_melodink_host_player_api_pause_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  PigeonMelodinkMelodinkHostPlayerApi* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API(user_data);

  if (self->vtable == nullptr || self->vtable->pause == nullptr) {
    return;
  }

  g_autoptr(PigeonMelodinkMelodinkHostPlayerApiPauseResponse) response = self->vtable->pause(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "MelodinkHostPlayerApi", "pause");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MelodinkHostPlayerApi", "pause", error->message);
  }
}

static void pigeon_melodink_melodink_host_player_api_seek_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  PigeonMelodinkMelodinkHostPlayerApi* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API(user_data);

  if (self->vtable == nullptr || self->vtable->seek == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t position_ms = fl_value_get_int(value0);
  g_autoptr(PigeonMelodinkMelodinkHostPlayerApiSeekResponse) response = self->vtable->seek(position_ms, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "MelodinkHostPlayerApi", "seek");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MelodinkHostPlayerApi", "seek", error->message);
  }
}

static void pigeon_melodink_melodink_host_player_api_skip_to_next_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  PigeonMelodinkMelodinkHostPlayerApi* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API(user_data);

  if (self->vtable == nullptr || self->vtable->skip_to_next == nullptr) {
    return;
  }

  g_autoptr(PigeonMelodinkMelodinkHostPlayerApiSkipToNextResponse) response = self->vtable->skip_to_next(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "MelodinkHostPlayerApi", "skipToNext");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MelodinkHostPlayerApi", "skipToNext", error->message);
  }
}

static void pigeon_melodink_melodink_host_player_api_skip_to_previous_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  PigeonMelodinkMelodinkHostPlayerApi* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API(user_data);

  if (self->vtable == nullptr || self->vtable->skip_to_previous == nullptr) {
    return;
  }

  g_autoptr(PigeonMelodinkMelodinkHostPlayerApiSkipToPreviousResponse) response = self->vtable->skip_to_previous(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "MelodinkHostPlayerApi", "skipToPrevious");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MelodinkHostPlayerApi", "skipToPrevious", error->message);
  }
}

static void pigeon_melodink_melodink_host_player_api_set_audios_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  PigeonMelodinkMelodinkHostPlayerApi* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API(user_data);

  if (self->vtable == nullptr || self->vtable->set_audios == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* previous_urls = value0;
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  FlValue* next_urls = value1;
  g_autoptr(PigeonMelodinkMelodinkHostPlayerApiSetAudiosResponse) response = self->vtable->set_audios(previous_urls, next_urls, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "MelodinkHostPlayerApi", "setAudios");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MelodinkHostPlayerApi", "setAudios", error->message);
  }
}

static void pigeon_melodink_melodink_host_player_api_set_loop_mode_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  PigeonMelodinkMelodinkHostPlayerApi* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API(user_data);

  if (self->vtable == nullptr || self->vtable->set_loop_mode == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  PigeonMelodinkMelodinkHostPlayerLoopMode loop = static_cast<PigeonMelodinkMelodinkHostPlayerLoopMode>(fl_value_get_int(reinterpret_cast<FlValue*>(const_cast<gpointer>(fl_value_get_custom_value(value0)))));
  g_autoptr(PigeonMelodinkMelodinkHostPlayerApiSetLoopModeResponse) response = self->vtable->set_loop_mode(loop, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "MelodinkHostPlayerApi", "setLoopMode");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MelodinkHostPlayerApi", "setLoopMode", error->message);
  }
}

static void pigeon_melodink_melodink_host_player_api_fetch_status_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  PigeonMelodinkMelodinkHostPlayerApi* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API(user_data);

  if (self->vtable == nullptr || self->vtable->fetch_status == nullptr) {
    return;
  }

  g_autoptr(PigeonMelodinkMelodinkHostPlayerApiFetchStatusResponse) response = self->vtable->fetch_status(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "MelodinkHostPlayerApi", "fetchStatus");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MelodinkHostPlayerApi", "fetchStatus", error->message);
  }
}

static void pigeon_melodink_melodink_host_player_api_set_auth_token_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  PigeonMelodinkMelodinkHostPlayerApi* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API(user_data);

  if (self->vtable == nullptr || self->vtable->set_auth_token == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* auth_token = fl_value_get_string(value0);
  g_autoptr(PigeonMelodinkMelodinkHostPlayerApiSetAuthTokenResponse) response = self->vtable->set_auth_token(auth_token, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "MelodinkHostPlayerApi", "setAuthToken");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MelodinkHostPlayerApi", "setAuthToken", error->message);
  }
}

void pigeon_melodink_melodink_host_player_api_set_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix, const PigeonMelodinkMelodinkHostPlayerApiVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func) {
  g_autofree gchar* dot_suffix = suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  g_autoptr(PigeonMelodinkMelodinkHostPlayerApi) api_data = pigeon_melodink_melodink_host_player_api_new(vtable, user_data, user_data_free_func);

  g_autoptr(PigeonMelodinkMessageCodec) codec = pigeon_melodink_message_codec_new();
  g_autofree gchar* play_channel_name = g_strdup_printf("dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.play%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) play_channel = fl_basic_message_channel_new(messenger, play_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(play_channel, pigeon_melodink_melodink_host_player_api_play_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* pause_channel_name = g_strdup_printf("dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.pause%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) pause_channel = fl_basic_message_channel_new(messenger, pause_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(pause_channel, pigeon_melodink_melodink_host_player_api_pause_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* seek_channel_name = g_strdup_printf("dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.seek%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) seek_channel = fl_basic_message_channel_new(messenger, seek_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(seek_channel, pigeon_melodink_melodink_host_player_api_seek_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* skip_to_next_channel_name = g_strdup_printf("dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.skipToNext%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) skip_to_next_channel = fl_basic_message_channel_new(messenger, skip_to_next_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(skip_to_next_channel, pigeon_melodink_melodink_host_player_api_skip_to_next_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* skip_to_previous_channel_name = g_strdup_printf("dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.skipToPrevious%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) skip_to_previous_channel = fl_basic_message_channel_new(messenger, skip_to_previous_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(skip_to_previous_channel, pigeon_melodink_melodink_host_player_api_skip_to_previous_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* set_audios_channel_name = g_strdup_printf("dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.setAudios%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) set_audios_channel = fl_basic_message_channel_new(messenger, set_audios_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(set_audios_channel, pigeon_melodink_melodink_host_player_api_set_audios_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* set_loop_mode_channel_name = g_strdup_printf("dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.setLoopMode%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) set_loop_mode_channel = fl_basic_message_channel_new(messenger, set_loop_mode_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(set_loop_mode_channel, pigeon_melodink_melodink_host_player_api_set_loop_mode_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* fetch_status_channel_name = g_strdup_printf("dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.fetchStatus%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) fetch_status_channel = fl_basic_message_channel_new(messenger, fetch_status_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(fetch_status_channel, pigeon_melodink_melodink_host_player_api_fetch_status_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* set_auth_token_channel_name = g_strdup_printf("dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.setAuthToken%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) set_auth_token_channel = fl_basic_message_channel_new(messenger, set_auth_token_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(set_auth_token_channel, pigeon_melodink_melodink_host_player_api_set_auth_token_cb, g_object_ref(api_data), g_object_unref);
}

void pigeon_melodink_melodink_host_player_api_clear_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix) {
  g_autofree gchar* dot_suffix = suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");

  g_autoptr(PigeonMelodinkMessageCodec) codec = pigeon_melodink_message_codec_new();
  g_autofree gchar* play_channel_name = g_strdup_printf("dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.play%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) play_channel = fl_basic_message_channel_new(messenger, play_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(play_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* pause_channel_name = g_strdup_printf("dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.pause%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) pause_channel = fl_basic_message_channel_new(messenger, pause_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(pause_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* seek_channel_name = g_strdup_printf("dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.seek%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) seek_channel = fl_basic_message_channel_new(messenger, seek_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(seek_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* skip_to_next_channel_name = g_strdup_printf("dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.skipToNext%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) skip_to_next_channel = fl_basic_message_channel_new(messenger, skip_to_next_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(skip_to_next_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* skip_to_previous_channel_name = g_strdup_printf("dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.skipToPrevious%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) skip_to_previous_channel = fl_basic_message_channel_new(messenger, skip_to_previous_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(skip_to_previous_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* set_audios_channel_name = g_strdup_printf("dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.setAudios%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) set_audios_channel = fl_basic_message_channel_new(messenger, set_audios_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(set_audios_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* set_loop_mode_channel_name = g_strdup_printf("dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.setLoopMode%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) set_loop_mode_channel = fl_basic_message_channel_new(messenger, set_loop_mode_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(set_loop_mode_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* fetch_status_channel_name = g_strdup_printf("dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.fetchStatus%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) fetch_status_channel = fl_basic_message_channel_new(messenger, fetch_status_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(fetch_status_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* set_auth_token_channel_name = g_strdup_printf("dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.setAuthToken%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) set_auth_token_channel = fl_basic_message_channel_new(messenger, set_auth_token_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(set_auth_token_channel, nullptr, nullptr, nullptr);
}

struct _PigeonMelodinkMelodinkHostPlayerApiInfo {
  GObject parent_instance;

  FlBinaryMessenger* messenger;
  gchar *suffix;
};

G_DEFINE_TYPE(PigeonMelodinkMelodinkHostPlayerApiInfo, pigeon_melodink_melodink_host_player_api_info, G_TYPE_OBJECT)

static void pigeon_melodink_melodink_host_player_api_info_dispose(GObject* object) {
  PigeonMelodinkMelodinkHostPlayerApiInfo* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_INFO(object);
  g_clear_object(&self->messenger);
  g_clear_pointer(&self->suffix, g_free);
  G_OBJECT_CLASS(pigeon_melodink_melodink_host_player_api_info_parent_class)->dispose(object);
}

static void pigeon_melodink_melodink_host_player_api_info_init(PigeonMelodinkMelodinkHostPlayerApiInfo* self) {
}

static void pigeon_melodink_melodink_host_player_api_info_class_init(PigeonMelodinkMelodinkHostPlayerApiInfoClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = pigeon_melodink_melodink_host_player_api_info_dispose;
}

PigeonMelodinkMelodinkHostPlayerApiInfo* pigeon_melodink_melodink_host_player_api_info_new(FlBinaryMessenger* messenger, const gchar* suffix) {
  PigeonMelodinkMelodinkHostPlayerApiInfo* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_INFO(g_object_new(pigeon_melodink_melodink_host_player_api_info_get_type(), nullptr));
  self->messenger = FL_BINARY_MESSENGER(g_object_ref(messenger));
  self->suffix = suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  return self;
}

struct _PigeonMelodinkMelodinkHostPlayerApiInfoAudioChangedResponse {
  GObject parent_instance;

  FlValue* error;
};

G_DEFINE_TYPE(PigeonMelodinkMelodinkHostPlayerApiInfoAudioChangedResponse, pigeon_melodink_melodink_host_player_api_info_audio_changed_response, G_TYPE_OBJECT)

static void pigeon_melodink_melodink_host_player_api_info_audio_changed_response_dispose(GObject* object) {
  PigeonMelodinkMelodinkHostPlayerApiInfoAudioChangedResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_INFO_AUDIO_CHANGED_RESPONSE(object);
  g_clear_pointer(&self->error, fl_value_unref);
  G_OBJECT_CLASS(pigeon_melodink_melodink_host_player_api_info_audio_changed_response_parent_class)->dispose(object);
}

static void pigeon_melodink_melodink_host_player_api_info_audio_changed_response_init(PigeonMelodinkMelodinkHostPlayerApiInfoAudioChangedResponse* self) {
}

static void pigeon_melodink_melodink_host_player_api_info_audio_changed_response_class_init(PigeonMelodinkMelodinkHostPlayerApiInfoAudioChangedResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = pigeon_melodink_melodink_host_player_api_info_audio_changed_response_dispose;
}

static PigeonMelodinkMelodinkHostPlayerApiInfoAudioChangedResponse* pigeon_melodink_melodink_host_player_api_info_audio_changed_response_new(FlValue* response) {
  PigeonMelodinkMelodinkHostPlayerApiInfoAudioChangedResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_INFO_AUDIO_CHANGED_RESPONSE(g_object_new(pigeon_melodink_melodink_host_player_api_info_audio_changed_response_get_type(), nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  }
  return self;
}

gboolean pigeon_melodink_melodink_host_player_api_info_audio_changed_response_is_error(PigeonMelodinkMelodinkHostPlayerApiInfoAudioChangedResponse* self) {
  g_return_val_if_fail(PIGEON_MELODINK_IS_MELODINK_HOST_PLAYER_API_INFO_AUDIO_CHANGED_RESPONSE(self), FALSE);
  return self->error != nullptr;
}

const gchar* pigeon_melodink_melodink_host_player_api_info_audio_changed_response_get_error_code(PigeonMelodinkMelodinkHostPlayerApiInfoAudioChangedResponse* self) {
  g_return_val_if_fail(PIGEON_MELODINK_IS_MELODINK_HOST_PLAYER_API_INFO_AUDIO_CHANGED_RESPONSE(self), nullptr);
  g_assert(pigeon_melodink_melodink_host_player_api_info_audio_changed_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar* pigeon_melodink_melodink_host_player_api_info_audio_changed_response_get_error_message(PigeonMelodinkMelodinkHostPlayerApiInfoAudioChangedResponse* self) {
  g_return_val_if_fail(PIGEON_MELODINK_IS_MELODINK_HOST_PLAYER_API_INFO_AUDIO_CHANGED_RESPONSE(self), nullptr);
  g_assert(pigeon_melodink_melodink_host_player_api_info_audio_changed_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue* pigeon_melodink_melodink_host_player_api_info_audio_changed_response_get_error_details(PigeonMelodinkMelodinkHostPlayerApiInfoAudioChangedResponse* self) {
  g_return_val_if_fail(PIGEON_MELODINK_IS_MELODINK_HOST_PLAYER_API_INFO_AUDIO_CHANGED_RESPONSE(self), nullptr);
  g_assert(pigeon_melodink_melodink_host_player_api_info_audio_changed_response_is_error(self));
  return fl_value_get_list_value(self->error, 2);
}

static void pigeon_melodink_melodink_host_player_api_info_audio_changed_cb(GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void pigeon_melodink_melodink_host_player_api_info_audio_changed(PigeonMelodinkMelodinkHostPlayerApiInfo* self, int64_t pos, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_int(pos));
  g_autofree gchar* channel_name = g_strdup_printf("dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApiInfo.audioChanged%s", self->suffix);
  g_autoptr(PigeonMelodinkMessageCodec) codec = pigeon_melodink_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(channel, args, cancellable, pigeon_melodink_melodink_host_player_api_info_audio_changed_cb, task);
}

PigeonMelodinkMelodinkHostPlayerApiInfoAudioChangedResponse* pigeon_melodink_melodink_host_player_api_info_audio_changed_finish(PigeonMelodinkMelodinkHostPlayerApiInfo* self, GAsyncResult* result, GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel = FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response = fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) { 
    return nullptr;
  }
  return pigeon_melodink_melodink_host_player_api_info_audio_changed_response_new(response);
}

struct _PigeonMelodinkMelodinkHostPlayerApiInfoUpdateStateResponse {
  GObject parent_instance;

  FlValue* error;
};

G_DEFINE_TYPE(PigeonMelodinkMelodinkHostPlayerApiInfoUpdateStateResponse, pigeon_melodink_melodink_host_player_api_info_update_state_response, G_TYPE_OBJECT)

static void pigeon_melodink_melodink_host_player_api_info_update_state_response_dispose(GObject* object) {
  PigeonMelodinkMelodinkHostPlayerApiInfoUpdateStateResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_INFO_UPDATE_STATE_RESPONSE(object);
  g_clear_pointer(&self->error, fl_value_unref);
  G_OBJECT_CLASS(pigeon_melodink_melodink_host_player_api_info_update_state_response_parent_class)->dispose(object);
}

static void pigeon_melodink_melodink_host_player_api_info_update_state_response_init(PigeonMelodinkMelodinkHostPlayerApiInfoUpdateStateResponse* self) {
}

static void pigeon_melodink_melodink_host_player_api_info_update_state_response_class_init(PigeonMelodinkMelodinkHostPlayerApiInfoUpdateStateResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = pigeon_melodink_melodink_host_player_api_info_update_state_response_dispose;
}

static PigeonMelodinkMelodinkHostPlayerApiInfoUpdateStateResponse* pigeon_melodink_melodink_host_player_api_info_update_state_response_new(FlValue* response) {
  PigeonMelodinkMelodinkHostPlayerApiInfoUpdateStateResponse* self = PIGEON_MELODINK_MELODINK_HOST_PLAYER_API_INFO_UPDATE_STATE_RESPONSE(g_object_new(pigeon_melodink_melodink_host_player_api_info_update_state_response_get_type(), nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  }
  return self;
}

gboolean pigeon_melodink_melodink_host_player_api_info_update_state_response_is_error(PigeonMelodinkMelodinkHostPlayerApiInfoUpdateStateResponse* self) {
  g_return_val_if_fail(PIGEON_MELODINK_IS_MELODINK_HOST_PLAYER_API_INFO_UPDATE_STATE_RESPONSE(self), FALSE);
  return self->error != nullptr;
}

const gchar* pigeon_melodink_melodink_host_player_api_info_update_state_response_get_error_code(PigeonMelodinkMelodinkHostPlayerApiInfoUpdateStateResponse* self) {
  g_return_val_if_fail(PIGEON_MELODINK_IS_MELODINK_HOST_PLAYER_API_INFO_UPDATE_STATE_RESPONSE(self), nullptr);
  g_assert(pigeon_melodink_melodink_host_player_api_info_update_state_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar* pigeon_melodink_melodink_host_player_api_info_update_state_response_get_error_message(PigeonMelodinkMelodinkHostPlayerApiInfoUpdateStateResponse* self) {
  g_return_val_if_fail(PIGEON_MELODINK_IS_MELODINK_HOST_PLAYER_API_INFO_UPDATE_STATE_RESPONSE(self), nullptr);
  g_assert(pigeon_melodink_melodink_host_player_api_info_update_state_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue* pigeon_melodink_melodink_host_player_api_info_update_state_response_get_error_details(PigeonMelodinkMelodinkHostPlayerApiInfoUpdateStateResponse* self) {
  g_return_val_if_fail(PIGEON_MELODINK_IS_MELODINK_HOST_PLAYER_API_INFO_UPDATE_STATE_RESPONSE(self), nullptr);
  g_assert(pigeon_melodink_melodink_host_player_api_info_update_state_response_is_error(self));
  return fl_value_get_list_value(self->error, 2);
}

static void pigeon_melodink_melodink_host_player_api_info_update_state_cb(GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void pigeon_melodink_melodink_host_player_api_info_update_state(PigeonMelodinkMelodinkHostPlayerApiInfo* self, PigeonMelodinkMelodinkHostPlayerProcessingState state, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_custom(129, fl_value_new_int(state), (GDestroyNotify)fl_value_unref));
  g_autofree gchar* channel_name = g_strdup_printf("dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApiInfo.updateState%s", self->suffix);
  g_autoptr(PigeonMelodinkMessageCodec) codec = pigeon_melodink_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(channel, args, cancellable, pigeon_melodink_melodink_host_player_api_info_update_state_cb, task);
}

PigeonMelodinkMelodinkHostPlayerApiInfoUpdateStateResponse* pigeon_melodink_melodink_host_player_api_info_update_state_finish(PigeonMelodinkMelodinkHostPlayerApiInfo* self, GAsyncResult* result, GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel = FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response = fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) { 
    return nullptr;
  }
  return pigeon_melodink_melodink_host_player_api_info_update_state_response_new(response);
}
