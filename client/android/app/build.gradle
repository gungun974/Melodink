import java.nio.file.Files
import java.util.zip.ZipEntry
import java.util.zip.ZipInputStream
import java.security.MessageDigest

plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "fr.gungun974.melodink"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "fr.gungun974.melodink"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }

    externalNativeBuild {
      cmake {
        path file('cpp/CMakeLists.txt')
        version '3.30.5'
      }
    }

    dependencies {
        def mediaVersion = "1.4.1"

        implementation "androidx.media3:media3-exoplayer:$mediaVersion"
        implementation "androidx.media3:media3-exoplayer-dash:$mediaVersion"
        implementation "androidx.media3:media3-exoplayer-hls:$mediaVersion"
        implementation "androidx.media3:media3-exoplayer-smoothstreaming:$mediaVersion"
    
        implementation fileTree(dir: "$buildDir/output", include: "*.jar")
    }
}

flutter {
    source = "../.."
}

task downloadDependencies(type: Exec)  {
    
        def outputDir = file("$buildDir/output")
        if (outputDir.exists()) {
            outputDir.deleteDir()
        }
        outputDir.mkdirs()

        def unzipDir = file("$buildDir/ffmpeg")
        if (unzipDir.exists()) {
            unzipDir.deleteDir()
        }
        unzipDir.mkdirs()

        // Download all *.jar dependencies & verify their MD5 checksums.
        def filesToDownload = [
            ["url": "https://github.com/gungun974/melodink-ffmpeg-android-build/releases/download/v7.1-2/default-arm64-v8a.jar", "md5": "ec95e48b08f3e251b808cba7cf97682c", "destination": file("$buildDir/v7.1-1/default-arm64-v8a.jar")],
            ["url": "https://github.com/gungun974/melodink-ffmpeg-android-build/releases/download/v7.1-2/default-armeabi-v7a.jar", "md5": "5001be0fefdcc710b6b73e72a437309f", "destination": file("$buildDir/v7.1-1/default-armeabi-v7a.jar")],
            ["url": "https://github.com/gungun974/melodink-ffmpeg-android-build/releases/download/v7.1-2/default-x86_64.jar", "md5": "ad5d8e01328f9f4d0ae46a94a4a5d410", "destination": file("$buildDir/v7.1-1/default-x86_64.jar")],
            ["url": "https://github.com/gungun974/melodink-ffmpeg-android-build/releases/download/v7.1-2/default-x86.jar", "md5": "99acc6c808d62b6e81474ef7557fb0ad", "destination": file("$buildDir/v7.1-1/default-x86.jar")]
        ]

        filesToDownload.each { fileInfo ->
            def destFile = fileInfo.destination

            if (destFile.exists()) {
                def calculatedMD5 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destFile.toPath())).encodeHex().toString()

                if (calculatedMD5 != fileInfo.md5) {
                    destFile.delete()
                    println "MD5 mismatch. File deleted: ${destFile}"
                }

            }

            if (!destFile.exists()) {
                destFile.parentFile.mkdirs()
                println "Downloading file from: ${fileInfo.url}"
                destFile.withOutputStream { os ->
                    os << new URL(fileInfo.url).openStream()
                }
                def calculatedMD5 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destFile.toPath())).encodeHex().toString()
                if (calculatedMD5 != fileInfo.md5) {
                    throw new GradleException("MD5 verification failed for ${destFile}")
                }
               
            }

            copy {
                from destFile
                into outputDir
            }

            // Unzip the JAR file
            unzip(destFile, unzipDir)
        }
    
}

// Helper method to unzip a file
def unzip(File zipFile, File destinationDir) {
    ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(zipFile))
    ZipEntry entry

    while ((entry = zipInputStream.nextEntry) != null) {
        File outFile = new File(destinationDir, entry.name)
        if (entry.isDirectory()) {
            outFile.mkdirs()
        } else {
            outFile.parentFile.mkdirs()
            outFile.withOutputStream { os ->
                os << zipInputStream
            }
        }
    }
    zipInputStream.close()
}

assemble.dependsOn(downloadDependencies)
