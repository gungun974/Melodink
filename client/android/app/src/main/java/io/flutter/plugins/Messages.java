// Autogenerated from Pigeon (v21.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Messages {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @NonNull
  protected static FlutterError createConnectionError(@NonNull String channelName) {
    return new FlutterError("channel-error",  "Unable to establish connection on channel: " + channelName + ".", "");
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  public enum MelodinkHostPlayerProcessingState {
    /** There hasn't been any resource loaded yet. */
    IDLE(0),
    /** Resource is being loaded. */
    LOADING(1),
    /** Resource is being buffered. */
    BUFFERING(2),
    /** Resource is buffered enough and available for playback. */
    READY(3),
    /** The end of resource was reached. */
    COMPLETED(4);

    final int index;

    private MelodinkHostPlayerProcessingState(final int index) {
      this.index = index;
    }
  }

  public enum MelodinkHostPlayerLoopMode {
    /** The current media item or queue will not repeat. */
    NONE(0),
    /** The current media item will repeat. */
    ONE(1),
    /** Playback will continue looping through all media items in the current list. */
    ALL(2);

    final int index;

    private MelodinkHostPlayerLoopMode(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PlayerStatus {
    private @NonNull Boolean playing;

    public @NonNull Boolean getPlaying() {
      return playing;
    }

    public void setPlaying(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playing\" is null.");
      }
      this.playing = setterArg;
    }

    private @NonNull Long pos;

    public @NonNull Long getPos() {
      return pos;
    }

    public void setPos(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"pos\" is null.");
      }
      this.pos = setterArg;
    }

    private @NonNull Long positionMs;

    public @NonNull Long getPositionMs() {
      return positionMs;
    }

    public void setPositionMs(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"positionMs\" is null.");
      }
      this.positionMs = setterArg;
    }

    private @NonNull Long bufferedPositionMs;

    public @NonNull Long getBufferedPositionMs() {
      return bufferedPositionMs;
    }

    public void setBufferedPositionMs(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bufferedPositionMs\" is null.");
      }
      this.bufferedPositionMs = setterArg;
    }

    private @NonNull MelodinkHostPlayerProcessingState state;

    public @NonNull MelodinkHostPlayerProcessingState getState() {
      return state;
    }

    public void setState(@NonNull MelodinkHostPlayerProcessingState setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"state\" is null.");
      }
      this.state = setterArg;
    }

    private @NonNull MelodinkHostPlayerLoopMode loop;

    public @NonNull MelodinkHostPlayerLoopMode getLoop() {
      return loop;
    }

    public void setLoop(@NonNull MelodinkHostPlayerLoopMode setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"loop\" is null.");
      }
      this.loop = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlayerStatus() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      PlayerStatus that = (PlayerStatus) o;
      return playing.equals(that.playing) && pos.equals(that.pos) && positionMs.equals(that.positionMs) && bufferedPositionMs.equals(that.bufferedPositionMs) && state.equals(that.state) && loop.equals(that.loop);
    }

    @Override
    public int hashCode() {
      return Objects.hash(playing, pos, positionMs, bufferedPositionMs, state, loop);
    }

    public static final class Builder {

      private @Nullable Boolean playing;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlaying(@NonNull Boolean setterArg) {
        this.playing = setterArg;
        return this;
      }

      private @Nullable Long pos;

      @CanIgnoreReturnValue
      public @NonNull Builder setPos(@NonNull Long setterArg) {
        this.pos = setterArg;
        return this;
      }

      private @Nullable Long positionMs;

      @CanIgnoreReturnValue
      public @NonNull Builder setPositionMs(@NonNull Long setterArg) {
        this.positionMs = setterArg;
        return this;
      }

      private @Nullable Long bufferedPositionMs;

      @CanIgnoreReturnValue
      public @NonNull Builder setBufferedPositionMs(@NonNull Long setterArg) {
        this.bufferedPositionMs = setterArg;
        return this;
      }

      private @Nullable MelodinkHostPlayerProcessingState state;

      @CanIgnoreReturnValue
      public @NonNull Builder setState(@NonNull MelodinkHostPlayerProcessingState setterArg) {
        this.state = setterArg;
        return this;
      }

      private @Nullable MelodinkHostPlayerLoopMode loop;

      @CanIgnoreReturnValue
      public @NonNull Builder setLoop(@NonNull MelodinkHostPlayerLoopMode setterArg) {
        this.loop = setterArg;
        return this;
      }

      public @NonNull PlayerStatus build() {
        PlayerStatus pigeonReturn = new PlayerStatus();
        pigeonReturn.setPlaying(playing);
        pigeonReturn.setPos(pos);
        pigeonReturn.setPositionMs(positionMs);
        pigeonReturn.setBufferedPositionMs(bufferedPositionMs);
        pigeonReturn.setState(state);
        pigeonReturn.setLoop(loop);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(playing);
      toListResult.add(pos);
      toListResult.add(positionMs);
      toListResult.add(bufferedPositionMs);
      toListResult.add(state);
      toListResult.add(loop);
      return toListResult;
    }

    static @NonNull PlayerStatus fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlayerStatus pigeonResult = new PlayerStatus();
      Object playing = __pigeon_list.get(0);
      pigeonResult.setPlaying((Boolean) playing);
      Object pos = __pigeon_list.get(1);
      pigeonResult.setPos((pos == null) ? null : ((pos instanceof Integer) ? (Integer) pos : (Long) pos));
      Object positionMs = __pigeon_list.get(2);
      pigeonResult.setPositionMs((positionMs == null) ? null : ((positionMs instanceof Integer) ? (Integer) positionMs : (Long) positionMs));
      Object bufferedPositionMs = __pigeon_list.get(3);
      pigeonResult.setBufferedPositionMs((bufferedPositionMs == null) ? null : ((bufferedPositionMs instanceof Integer) ? (Integer) bufferedPositionMs : (Long) bufferedPositionMs));
      Object state = __pigeon_list.get(4);
      pigeonResult.setState((MelodinkHostPlayerProcessingState) state);
      Object loop = __pigeon_list.get(5);
      pigeonResult.setLoop((MelodinkHostPlayerLoopMode) loop);
      return pigeonResult;
    }
  }

  private static class PigeonCodec extends StandardMessageCodec {
    public static final PigeonCodec INSTANCE = new PigeonCodec();

    private PigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 129:
          return PlayerStatus.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          Object value = readValue(buffer);
          return value == null ? null : MelodinkHostPlayerProcessingState.values()[(int) value];
        case (byte) 131:
          Object value = readValue(buffer);
          return value == null ? null : MelodinkHostPlayerLoopMode.values()[(int) value];
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PlayerStatus) {
        stream.write(129);
        writeValue(stream, ((PlayerStatus) value).toList());
      } else if (value instanceof MelodinkHostPlayerProcessingState) {
        stream.write(130);
        writeValue(stream, value == null ? null : ((MelodinkHostPlayerProcessingState) value).index);
      } else if (value instanceof MelodinkHostPlayerLoopMode) {
        stream.write(131);
        writeValue(stream, value == null ? null : ((MelodinkHostPlayerLoopMode) value).index);
      } else {
        super.writeValue(stream, value);
      }
    }
  }


  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface MelodinkHostPlayerApi {

    void play();

    void pause();

    void seek(@NonNull Long positionMs);

    void skipToNext();

    void skipToPrevious();

    void setAudios(@NonNull List<String> previousUrls, @NonNull List<String> nextUrls);

    void setLoopMode(@NonNull MelodinkHostPlayerLoopMode loop);

    @NonNull 
    PlayerStatus fetchStatus();

    /** The codec used by MelodinkHostPlayerApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `MelodinkHostPlayerApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable MelodinkHostPlayerApi api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable MelodinkHostPlayerApi api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.play" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.play();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.pause" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.pause();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.seek" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number positionMsArg = (Number) args.get(0);
                try {
                  api.seek((positionMsArg == null) ? null : positionMsArg.longValue());
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.skipToNext" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.skipToNext();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.skipToPrevious" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.skipToPrevious();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.setAudios" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                List<String> previousUrlsArg = (List<String>) args.get(0);
                List<String> nextUrlsArg = (List<String>) args.get(1);
                try {
                  api.setAudios(previousUrlsArg, nextUrlsArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.setLoopMode" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                MelodinkHostPlayerLoopMode loopArg = (MelodinkHostPlayerLoopMode) args.get(0);
                try {
                  api.setLoopMode(loopArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.fetchStatus" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  PlayerStatus output = api.fetchStatus();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class MelodinkHostPlayerApiInfo {
    private final @NonNull BinaryMessenger binaryMessenger;
    private final String messageChannelSuffix;

    public MelodinkHostPlayerApiInfo(@NonNull BinaryMessenger argBinaryMessenger) {
      this(argBinaryMessenger, "");
    }
    public MelodinkHostPlayerApiInfo(@NonNull BinaryMessenger argBinaryMessenger, @NonNull String messageChannelSuffix) {
      this.binaryMessenger = argBinaryMessenger;
      this.messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
    }

    /** Public interface for sending reply. */ 
    /** The codec used by MelodinkHostPlayerApiInfo. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    public void audioChanged(@NonNull Long posArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApiInfo.audioChanged" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(posArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void updateState(@NonNull MelodinkHostPlayerProcessingState stateArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApiInfo.updateState" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(stateArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
  }
}
