// Autogenerated from Pigeon (v21.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace pigeon_melodink {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string channel_name) {
    return FlutterError(
        "channel-error",
        "Unable to establish connection on channel: '" + channel_name + "'.",
        EncodableValue(""));
}

// PlayerStatus

PlayerStatus::PlayerStatus(
  bool playing,
  int64_t pos,
  int64_t position_ms,
  int64_t buffered_position_ms,
  const MelodinkHostPlayerProcessingState& state,
  const MelodinkHostPlayerLoopMode& loop)
 : playing_(playing),
    pos_(pos),
    position_ms_(position_ms),
    buffered_position_ms_(buffered_position_ms),
    state_(state),
    loop_(loop) {}

bool PlayerStatus::playing() const {
  return playing_;
}

void PlayerStatus::set_playing(bool value_arg) {
  playing_ = value_arg;
}


int64_t PlayerStatus::pos() const {
  return pos_;
}

void PlayerStatus::set_pos(int64_t value_arg) {
  pos_ = value_arg;
}


int64_t PlayerStatus::position_ms() const {
  return position_ms_;
}

void PlayerStatus::set_position_ms(int64_t value_arg) {
  position_ms_ = value_arg;
}


int64_t PlayerStatus::buffered_position_ms() const {
  return buffered_position_ms_;
}

void PlayerStatus::set_buffered_position_ms(int64_t value_arg) {
  buffered_position_ms_ = value_arg;
}


const MelodinkHostPlayerProcessingState& PlayerStatus::state() const {
  return state_;
}

void PlayerStatus::set_state(const MelodinkHostPlayerProcessingState& value_arg) {
  state_ = value_arg;
}


const MelodinkHostPlayerLoopMode& PlayerStatus::loop() const {
  return loop_;
}

void PlayerStatus::set_loop(const MelodinkHostPlayerLoopMode& value_arg) {
  loop_ = value_arg;
}


EncodableList PlayerStatus::ToEncodableList() const {
  EncodableList list;
  list.reserve(6);
  list.push_back(EncodableValue(playing_));
  list.push_back(EncodableValue(pos_));
  list.push_back(EncodableValue(position_ms_));
  list.push_back(EncodableValue(buffered_position_ms_));
  list.push_back(CustomEncodableValue(state_));
  list.push_back(CustomEncodableValue(loop_));
  return list;
}

PlayerStatus PlayerStatus::FromEncodableList(const EncodableList& list) {
  PlayerStatus decoded(
    std::get<bool>(list[0]),
    list[1].LongValue(),
    list[2].LongValue(),
    list[3].LongValue(),
    std::any_cast<const MelodinkHostPlayerProcessingState&>(std::get<CustomEncodableValue>(list[4])),
    std::any_cast<const MelodinkHostPlayerLoopMode&>(std::get<CustomEncodableValue>(list[5])));
  return decoded;
}


PigeonCodecSerializer::PigeonCodecSerializer() {}

EncodableValue PigeonCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 129:
      return CustomEncodableValue(PlayerStatus::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 130:
      {
        const auto& encodable_enum_arg = ReadValue(stream);
        const int64_t enum_arg_value = encodable_enum_arg.IsNull() ? 0 : encodable_enum_arg.LongValue();
        return encodable_enum_arg.IsNull() ? EncodableValue() : CustomEncodableValue(static_cast<MelodinkHostPlayerProcessingState>(enum_arg_value));
      }
    case 131:
      {
        const auto& encodable_enum_arg = ReadValue(stream);
        const int64_t enum_arg_value = encodable_enum_arg.IsNull() ? 0 : encodable_enum_arg.LongValue();
        return encodable_enum_arg.IsNull() ? EncodableValue() : CustomEncodableValue(static_cast<MelodinkHostPlayerLoopMode>(enum_arg_value));
      }
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
    }
}

void PigeonCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(PlayerStatus)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<PlayerStatus>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(MelodinkHostPlayerProcessingState)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(static_cast<int>(std::any_cast<MelodinkHostPlayerProcessingState>(*custom_value))), stream);
      return;
    }
    if (custom_value->type() == typeid(MelodinkHostPlayerLoopMode)) {
      stream->WriteByte(131);
      WriteValue(EncodableValue(static_cast<int>(std::any_cast<MelodinkHostPlayerLoopMode>(*custom_value))), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by MelodinkHostPlayerApi.
const flutter::StandardMessageCodec& MelodinkHostPlayerApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&PigeonCodecSerializer::GetInstance());
}

// Sets up an instance of `MelodinkHostPlayerApi` to handle messages through the `binary_messenger`.
void MelodinkHostPlayerApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  MelodinkHostPlayerApi* api) {
  MelodinkHostPlayerApi::SetUp(binary_messenger, api, "");
}

void MelodinkHostPlayerApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  MelodinkHostPlayerApi* api,
  const std::string& message_channel_suffix) {
  const std::string prepended_suffix = message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "";
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.play" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          std::optional<FlutterError> output = api->Play();
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.pause" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          std::optional<FlutterError> output = api->Pause();
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.seek" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_position_ms_arg = args.at(0);
          if (encodable_position_ms_arg.IsNull()) {
            reply(WrapError("position_ms_arg unexpectedly null."));
            return;
          }
          const int64_t position_ms_arg = encodable_position_ms_arg.LongValue();
          std::optional<FlutterError> output = api->Seek(position_ms_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.skipToNext" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          std::optional<FlutterError> output = api->SkipToNext();
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.skipToPrevious" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          std::optional<FlutterError> output = api->SkipToPrevious();
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.setAudios" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_previous_urls_arg = args.at(0);
          if (encodable_previous_urls_arg.IsNull()) {
            reply(WrapError("previous_urls_arg unexpectedly null."));
            return;
          }
          const auto& previous_urls_arg = std::get<EncodableList>(encodable_previous_urls_arg);
          const auto& encodable_next_urls_arg = args.at(1);
          if (encodable_next_urls_arg.IsNull()) {
            reply(WrapError("next_urls_arg unexpectedly null."));
            return;
          }
          const auto& next_urls_arg = std::get<EncodableList>(encodable_next_urls_arg);
          std::optional<FlutterError> output = api->SetAudios(previous_urls_arg, next_urls_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.setLoopMode" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_loop_arg = args.at(0);
          if (encodable_loop_arg.IsNull()) {
            reply(WrapError("loop_arg unexpectedly null."));
            return;
          }
          const auto& loop_arg = std::any_cast<const MelodinkHostPlayerLoopMode&>(std::get<CustomEncodableValue>(encodable_loop_arg));
          std::optional<FlutterError> output = api->SetLoopMode(loop_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.fetchStatus" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          ErrorOr<PlayerStatus> output = api->FetchStatus();
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApi.setAuthToken" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_auth_token_arg = args.at(0);
          if (encodable_auth_token_arg.IsNull()) {
            reply(WrapError("auth_token_arg unexpectedly null."));
            return;
          }
          const auto& auth_token_arg = std::get<std::string>(encodable_auth_token_arg);
          std::optional<FlutterError> output = api->SetAuthToken(auth_token_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
}

EncodableValue MelodinkHostPlayerApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue MelodinkHostPlayerApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

// Generated class from Pigeon that represents Flutter messages that can be called from C++.
MelodinkHostPlayerApiInfo::MelodinkHostPlayerApiInfo(flutter::BinaryMessenger* binary_messenger)
 : binary_messenger_(binary_messenger),
    message_channel_suffix_("") {}

MelodinkHostPlayerApiInfo::MelodinkHostPlayerApiInfo(
  flutter::BinaryMessenger* binary_messenger,
  const std::string& message_channel_suffix)
 : binary_messenger_(binary_messenger),
    message_channel_suffix_(message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "") {}

const flutter::StandardMessageCodec& MelodinkHostPlayerApiInfo::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&PigeonCodecSerializer::GetInstance());
}

void MelodinkHostPlayerApiInfo::AudioChanged(
  int64_t pos_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApiInfo.audioChanged" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    EncodableValue(pos_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void MelodinkHostPlayerApiInfo::UpdateState(
  const MelodinkHostPlayerProcessingState& state_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.pigeon_melodink.MelodinkHostPlayerApiInfo.updateState" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(state_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

}  // namespace pigeon_melodink
